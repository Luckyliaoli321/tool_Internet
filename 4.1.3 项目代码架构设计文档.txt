# 4.1.3 项目代码架构设计文档

## 1. 项目概述

本项目是一个提供多种实用工具的网站，包含以下功能：
- 文件转换
- 图片压缩
- 图片裁剪
- 图片格式转换
- 图片水印

网站设计简洁大方，便于用户快速上手使用各种功能。

## 2. 架构设计

### 2.1 总体架构

本项目采用前后端分离的架构设计：
- 前端：负责用户界面展示和部分客户端处理
- 后端：处理复杂的文件转换和需要服务器计算能力的功能

### 2.2 技术选型

#### 前端技术栈：
- 框架：React.js
- UI组件库：Ant Design
- 状态管理：React Hooks
- 路由管理：React Router
- 文件上传：React Dropzone
- 图片处理：Canvas API
- HTTP请求：Axios

#### 后端技术栈：
- 框架：Node.js + Express
- 文件处理：Multer（文件上传）
- 文件转换：相关NPM包（如pdf-lib, docx, xlsx等）
- 图片处理：Sharp
- 格式转换：ImageMagick（通过Sharp或其他Node包调用）

### 2.3 功能与后端需求分析

| 功能 | 是否需要后端 | 说明 |
|-----|------------|------|
| 文件转换 | 是 | 需要后端处理复杂的文件格式转换 |
| 图片压缩 | 是/否 | 小图片可前端处理，大图片建议后端处理 |
| 图片裁剪 | 否 | 可以完全在前端通过Canvas API实现 |
| 图片格式转换 | 是/否 | 简单格式前端可处理，复杂格式需后端支持 |
| 图片水印 | 否 | 可以完全在前端通过Canvas API实现 |

## 3. 前端架构

### 3.1 页面组件结构

- App（主应用）
  - Header（导航头部）
  - MainRouter（路由组件）
    - HomePage（首页）
    - FileConvertPage（文件转换页面）
    - ImageCompressPage（图片压缩页面）
    - ImageCropPage（图片裁剪页面）
    - ImageFormatPage（图片格式转换页面）
    - ImageWatermarkPage（图片水印页面）
  - Footer（页脚）

### 3.2 公共组件

- FileUploader：文件上传组件
- ProgressBar：进度条组件
- ImagePreview：图片预览组件
- ToolCard：功能卡片组件（用于首页展示）
- Button：通用按钮组件
- Select：选择组件
- Slider：滑动条组件

## 4. 后端架构

### 4.1 API设计

#### 文件转换API
- `POST /api/convert/file`：文件格式转换
  - 请求：文件内容（multipart/form-data）和目标格式
  - 响应：转换后的文件或下载链接

#### 图片处理API
- `POST /api/image/compress`：大图片压缩
  - 请求：图片文件和压缩参数（质量、尺寸）
  - 响应：压缩后的图片

- `POST /api/image/format-convert`：复杂格式图片转换
  - 请求：图片文件和目标格式
  - 响应：转换后的图片

### 4.2 服务层设计

- 文件转换服务（FileConversionService）
- 图片处理服务（ImageProcessingService）

## 5. 数据流

### 5.1 文件转换流程
1. 用户上传文件到前端
2. 前端显示文件信息并提供格式选择
3. 用户选择目标格式并点击转换
4. 前端发送文件和参数到后端
5. 后端处理转换并返回结果
6. 前端显示进度条和完成状态
7. 用户下载转换后的文件

### 5.2 图片处理流程（前端）
1. 用户上传图片到前端
2. 前端使用Canvas API进行预处理（裁剪、水印等）
3. 用户设置参数（裁剪区域、水印文字等）
4. 用户点击应用更改
5. 前端生成处理后的图片
6. 用户下载处理后的图片

### 5.3 图片处理流程（后端）
1. 用户上传大图片到前端
2. 前端发送图片和参数到后端
3. 后端处理图片（压缩、格式转换等）
4. 后端返回处理后的图片
5. 前端显示处理结果
6. 用户下载处理后的图片

## 6. 安全考虑

- 文件类型验证：确保上传的文件类型符合预期
- 文件大小限制：防止上传过大文件导致服务器压力
- CORS配置：确保API安全访问
- 防XSS攻击：处理用户输入
- 文件处理超时处理：避免长时间占用服务器资源

## 7. 性能优化

- 图片懒加载
- 资源文件压缩和缓存
- 使用CDN分发静态资源
- 前端代码分割
- 大型文件处理时使用进度提示
- 服务器端使用流式处理大文件 